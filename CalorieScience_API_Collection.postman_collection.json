{
	"info": {
		"_postman_id": "caloriesci-api-v5",
		"name": "CalorieScience API - Complete Nutrition Workflow v5",
		"description": "Complete API collection demonstrating the full nutrition workflow: Register ‚Üí Calculate EER/Macros/Micros ‚Üí Save Client ‚Üí Get Client ‚Üí Update Nutrition Data. Includes support for 23 micronutrients including Pantothenic Acid (B5) and Biotin (B7).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "caloriesci-v5"
	},
	"item": [
		{
			"name": "üîê 1. Authentication",
			"item": [
				{
					"name": "Register Nutritionist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    pm.environment.set('user_email', response.user.email);",
									"    console.log('‚úÖ Registration successful, token saved');",
									"    console.log('Token:', response.token);",
									"} else {",
									"    console.log('‚ùå Registration failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"register\",\n  \"email\": \"nutritionist@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"Dr. Sarah\",\n  \"lastName\": \"Wilson\",\n  \"phone\": \"5551234567\",\n  \"phoneCountryCode\": \"+44\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth"
							]
						}
					}
				}
			]
		},
		{
			"name": "üìä 2. Calculate Nutrition Data",
			"item": [
				{
					"name": "Calculate EER (Energy Requirements)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('eer_calories', response.eer);",
									"    pm.environment.set('bmr', response.bmr);",
									"    pm.environment.set('bmi', response.bmi);",
									"    pm.environment.set('bmi_category', response.bmiCategory);",
									"    console.log('‚úÖ EER calculated:', response.eer, 'calories');",
									"    console.log('BMR:', response.bmr, 'BMI:', response.bmi);",
									"} else {",
									"    console.log('‚ùå EER calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateEer\",\n  \"location\": \"London, UK\",\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"heightCm\": 165,\n  \"weightKg\": 60,\n  \"activityLevel\": \"moderately_active\",\n  \"pregnancyStatus\": \"not_pregnant\",\n  \"lactationStatus\": \"not_lactating\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "Calculate Macros (Protein, Carbs, Fat)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('macros_data', JSON.stringify(response));",
									"    console.log('‚úÖ Macros calculated successfully');",
									"    console.log('Protein range:', response.macros.Protein?.min_grams, '-', response.macros.Protein?.max_grams, 'g');",
									"    console.log('Carbs range:', response.macros.Carbohydrates?.min_grams, '-', response.macros.Carbohydrates?.max_grams, 'g');",
									"    console.log('Fat range:', response.macros['Total Fat']?.min_grams, '-', response.macros['Total Fat']?.max_grams, 'g');",
									"} else {",
									"    console.log('‚ùå Macros calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMacros\",\n  \"location\": \"London, UK\",\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"heightCm\": 165,\n  \"weightKg\": 60,\n  \"eer\": {{eer_calories}},\n  \"activityLevel\": \"moderately_active\",\n  \"healthGoals\": [\"weight_maintenance\"],\n  \"dietaryPreferences\": [\"balanced\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "Calculate Micronutrients (All 23 vitamins & minerals)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('micronutrients_data', JSON.stringify(response));",
									"    console.log('‚úÖ Micronutrients calculated successfully');",
									"    console.log('Vitamin A:', response.micronutrients.vitaminA?.amount, response.micronutrients.vitaminA?.unit);",
									"    console.log('Pantothenic Acid (B5):', response.micronutrients.pantothenicAcid?.amount, response.micronutrients.pantothenicAcid?.unit);",
									"    console.log('Biotin (B7):', response.micronutrients.biotin?.amount, response.micronutrients.biotin?.unit);",
									"    console.log('Iron:', response.micronutrients.iron?.amount, response.micronutrients.iron?.unit);",
									"    console.log('Calcium:', response.micronutrients.calcium?.amount, response.micronutrients.calcium?.unit);",
									"} else {",
									"    console.log('‚ùå Micronutrients calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMicronutrients\",\n  \"location\": \"London, UK\",\n  \"age\": 28,\n  \"gender\": \"female\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				}
			]
		},
		{
			"name": "üë• 3. Client Management",
			"item": [
				{
					"name": "Create Client with Complete Nutrition Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('client_id', response.client.id);",
									"    console.log('‚úÖ Client created successfully');",
									"    console.log('Client ID:', response.client.id);",
									"    console.log('EER Calories:', response.client.eerCalories);",
									"    console.log('BMI:', response.client.bmi, '(' + response.client.bmiCategory + ')');",
									"} else {",
									"    console.log('‚ùå Client creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Emma\",\n  \"lastName\": \"Johnson\", \n  \"email\": \"emma.johnson@example.com\",\n  \"dateOfBirth\": \"1995-03-15\",\n  \"gender\": \"female\",\n  \"heightCm\": 165,\n  \"weightKg\": 60,\n  \"location\": \"London, UK\",\n  \"activityLevel\": \"moderately_active\",\n  \"healthGoals\": [\"weight_maintenance\", \"muscle_gain\"],\n  \"dietaryPreferences\": [\"balanced\"],\n  \"status\": \"active\",\n  \"bmi\": {{bmi}},\n  \"bmr\": {{bmr}},\n  \"eerCalories\": {{eer_calories}},\n  \"nutritionistNotes\": \"Initial comprehensive nutrition plan with EER, macros, and micronutrients\",\n  \"macrosData\": {{macros_data}},\n  \"micronutrientsData\": {\n    \"micronutrients\": {\n      \"vitaminA\": {\"amount\": 700},\n      \"thiamin\": {\"amount\": 0.8},\n      \"riboflavin\": {\"amount\": 1.1},\n      \"niacinEquivalent\": {\"amount\": 13},\n      \"pantothenicAcid\": {\"amount\": 5},\n      \"vitaminB6\": {\"amount\": 1.2},\n      \"biotin\": {\"amount\": 30},\n      \"vitaminB12\": {\"amount\": 1.5},\n      \"folate\": {\"amount\": 200},\n      \"vitaminC\": {\"amount\": 40},\n      \"vitaminD\": {\"amount\": 10},\n      \"iron\": {\"amount\": 14.8},\n      \"calcium\": {\"amount\": 700},\n      \"magnesium\": {\"amount\": 270},\n      \"potassium\": {\"amount\": 3500},\n      \"zinc\": {\"amount\": 7},\n      \"copper\": {\"amount\": 1.2},\n      \"iodine\": {\"amount\": 140},\n      \"selenium\": {\"amount\": 60}\n    },\n    \"guidelineUsed\": \"UK\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients"
							]
						}
					}
				},
				{
					"name": "Get Client (with all nutrition data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const client = response.client;",
									"    console.log('‚úÖ Client retrieved successfully');",
									"    console.log('Client:', client.firstName, client.lastName);",
									"    console.log('EER Calories:', client.eerCalories);",
									"    console.log('Protein:', client.proteinGrams, 'g');",
									"    console.log('Carbs:', client.carbsGrams, 'g');",
									"    console.log('Fat:', client.fatGrams, 'g');",
									"    console.log('Vitamin A:', client.micronutrients.vitaminA, 'mcg');",
									"    console.log('Pantothenic Acid (B5):', client.micronutrients.pantothenicAcid, 'mg');",
									"    console.log('Biotin (B7):', client.micronutrients.biotin, 'mcg');",
									"    console.log('Iron:', client.micronutrients.iron, 'mg');",
									"    console.log('Calcium:', client.micronutrients.calcium, 'mg');",
									"} else {",
									"    console.log('‚ùå Client retrieval failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{client_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "üîÑ 4. Update Nutrition Data",
			"item": [
				{
					"name": "Update EER Calories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ EER updated successfully');",
									"    console.log('New EER Calories:', response.client.eerCalories);",
									"    console.log('Updated notes:', response.client.nutritionistNotes);",
									"} else {",
									"    console.log('‚ùå EER update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eerCalories\": 2100,\n  \"nutritionistNotes\": \"Updated EER based on new activity level assessment\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{client_id}}"
							]
						}
					}
				},
				{
					"name": "Update Macros (Protein, Carbs, Fat)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Macros updated successfully');",
									"    console.log('Protein:', response.client.proteinGrams, 'g');",
									"    console.log('Carbs:', response.client.carbsGrams, 'g');",
									"    console.log('Fat:', response.client.fatGrams, 'g');",
									"    console.log('Fiber:', response.client.fiberGrams, 'g');",
									"} else {",
									"    console.log('‚ùå Macros update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eerCalories\": 2100,\n  \"proteinGrams\": 110,\n  \"carbsGrams\": 250,\n  \"fatGrams\": 75,\n  \"fiberGrams\": 28,\n  \"nutritionistNotes\": \"Updated macros for muscle gain goals\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{client_id}}"
							]
						}
					}
				},
				{
					"name": "Update Micronutrients (Including new B5 & B7)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const micros = response.client.micronutrients;",
									"    console.log('‚úÖ Micronutrients updated successfully');",
									"    console.log('Vitamin A:', micros.vitaminA, 'mcg');",
									"    console.log('Pantothenic Acid (B5):', micros.pantothenicAcid, 'mg');", 
									"    console.log('Biotin (B7):', micros.biotin, 'mcg');",
									"    console.log('Vitamin C:', micros.vitaminC, 'mg');",
									"    console.log('Vitamin D:', micros.vitaminD, 'mcg');",
									"    console.log('Iron:', micros.iron, 'mg');",
									"    console.log('Calcium:', micros.calcium, 'mg');",
									"    console.log('Zinc:', micros.zinc, 'mg');",
									"    console.log('Guideline Used:', micros.guidelineUsed);",
									"} else {",
									"    console.log('‚ùå Micronutrients update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"micronutrientsData\": {\n    \"micronutrients\": {\n      \"vitaminA\": {\"amount\": 800},\n      \"thiamin\": {\"amount\": 0.9},\n      \"riboflavin\": {\"amount\": 1.2},\n      \"niacinEquivalent\": {\"amount\": 14},\n      \"pantothenicAcid\": {\"amount\": 6},\n      \"vitaminB6\": {\"amount\": 1.4},\n      \"biotin\": {\"amount\": 35},\n      \"vitaminB12\": {\"amount\": 2.0},\n      \"folate\": {\"amount\": 220},\n      \"vitaminC\": {\"amount\": 50},\n      \"vitaminD\": {\"amount\": 15},\n      \"iron\": {\"amount\": 16},\n      \"calcium\": {\"amount\": 800},\n      \"magnesium\": {\"amount\": 300},\n      \"potassium\": {\"amount\": 3800},\n      \"zinc\": {\"amount\": 8},\n      \"copper\": {\"amount\": 1.3},\n      \"iodine\": {\"amount\": 150},\n      \"selenium\": {\"amount\": 65},\n      \"phosphorus\": {\"amount\": 550},\n      \"chloride\": {\"amount\": 2300},\n      \"sodium\": {\"amount\": 2.3}\n    },\n    \"guidelineUsed\": \"UK\"\n  },\n  \"nutritionistNotes\": \"Updated micronutrients based on latest lab results and dietary assessment. Increased B vitamins for energy support.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{client_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "üìã 5. Final Verification",
			"item": [
				{
					"name": "Get Final Client State (All Updates Applied)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const client = response.client;",
									"    console.log('üéâ FINAL CLIENT STATE - ALL UPDATES APPLIED');",
									"    console.log('================================');",
									"    console.log('üë§ CLIENT INFO:');",
									"    console.log('Name:', client.firstName, client.lastName);",
									"    console.log('Age:', new Date().getFullYear() - new Date(client.dateOfBirth).getFullYear(), 'years');",
									"    console.log('BMI:', client.bmi, '(' + client.bmiCategory + ')');",
									"    console.log('');",
									"    console.log('‚ö° ENERGY REQUIREMENTS:');",
									"    console.log('EER Calories:', client.eerCalories);",
									"    console.log('');",
									"    console.log('ü•ó MACRONUTRIENTS:');",
									"    console.log('Protein:', client.proteinGrams, 'g');",
									"    console.log('Carbohydrates:', client.carbsGrams, 'g');",
									"    console.log('Fat:', client.fatGrams, 'g');",
									"    console.log('Fiber:', client.fiberGrams, 'g');",
									"    console.log('');",
									"    console.log('üíä MICRONUTRIENTS:');",
									"    console.log('--- Vitamins ---');",
									"    console.log('Vitamin A:', client.micronutrients.vitaminA, 'mcg');",
									"    console.log('Thiamin (B1):', client.micronutrients.thiamin, 'mg');",
									"    console.log('Riboflavin (B2):', client.micronutrients.riboflavin, 'mg');",
									"    console.log('Niacin Equivalent:', client.micronutrients.niacin, 'mg');",
									"    console.log('üÜï Pantothenic Acid (B5):', client.micronutrients.pantothenicAcid, 'mg');",
									"    console.log('Vitamin B6:', client.micronutrients.vitaminB6, 'mg');",
									"    console.log('üÜï Biotin (B7):', client.micronutrients.biotin, 'mcg');",
									"    console.log('Vitamin B12:', client.micronutrients.vitaminB12, 'mcg');",
									"    console.log('Folate:', client.micronutrients.folate, 'mcg');",
									"    console.log('Vitamin C:', client.micronutrients.vitaminC, 'mg');",
									"    console.log('Vitamin D:', client.micronutrients.vitaminD, 'mcg');",
									"    console.log('--- Minerals ---');",
									"    console.log('Iron:', client.micronutrients.iron, 'mg');",
									"    console.log('Calcium:', client.micronutrients.calcium, 'mg');",
									"    console.log('Magnesium:', client.micronutrients.magnesium, 'mg');",
									"    console.log('Potassium:', client.micronutrients.potassium, 'mg');",
									"    console.log('Zinc:', client.micronutrients.zinc, 'mg');",
									"    console.log('Copper:', client.micronutrients.copper, 'mg');",
									"    console.log('Iodine:', client.micronutrients.iodine, 'mcg');",
									"    console.log('Selenium:', client.micronutrients.selenium, 'mcg');",
									"    console.log('Phosphorus:', client.micronutrients.phosphorus, 'mg');",
									"    console.log('Chloride:', client.micronutrients.chloride, 'mg');",
									"    console.log('Sodium:', client.micronutrients.sodium, 'g');",
									"    console.log('');",
									"    console.log('üìä METADATA:');",
									"    console.log('Guideline Used:', client.micronutrients.guidelineUsed);",
									"    console.log('Calculation Method:', client.calculationMethod);",
									"    console.log('Last Updated:', client.micronutrients.updatedAt);",
									"    console.log('Notes:', client.nutritionistNotes);",
									"    console.log('');",
									"    console.log('‚úÖ WORKFLOW COMPLETED SUCCESSFULLY!');",
									"    console.log('All 23 micronutrients including new B5 & B7 are working perfectly!');",
									"} else {",
									"    console.log('‚ùå Final verification failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{client_id}}"
							]
						}
					}
				},
				{
					"name": "List All Clients (Optional)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Clients listed successfully');",
									"    console.log('Total clients:', response.clients.length);",
									"    response.clients.forEach((client, index) => {",
									"        console.log(`${index + 1}. ${client.firstName} ${client.lastName} (${client.status})`);",
									"    });",
									"} else {",
									"    console.log('‚ùå Client listing failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients?status=all&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients"
							],
							"query": [
								{
									"key": "status",
									"value": "all"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üá∫üá∏ USA Complete Journey",
			"item": [
				{
					"name": "1. Calculate EER (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_eer', response.eer);",
									"    pm.environment.set('usa_bmr', response.bmr);",
									"    pm.environment.set('usa_bmi', response.bmi);",
									"    console.log('‚úÖ USA EER calculated:', response.eer);",
									"    console.log('Formula used:', response.formulaUsed);",
									"    console.log('Guideline:', response.eerGuideline);",
									"} else {",
									"    console.log('‚ùå EER calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateEer\",\n  \"location\": \"USA\",\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"heightCm\": 175,\n  \"weightKg\": 70,\n  \"activityLevel\": \"moderately_active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "2. Calculate Macros (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_macros', JSON.stringify(response.macros));",
									"    console.log('‚úÖ USA Macros calculated');",
									"    console.log('Guideline:', response.macroGuideline);",
									"    console.log('Protein:', response.macros.Protein.min_grams + '-' + response.macros.Protein.max_grams + 'g');",
									"} else {",
									"    console.log('‚ùå Macros calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMacros\",\n  \"location\": \"USA\",\n  \"eer\": {{usa_eer}},\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"weightKg\": 70\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "3. Calculate Micronutrients (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_micronutrients', JSON.stringify(response.micronutrients));",
									"    pm.environment.set('usa_guideline_used', response.guidelineUsed);",
									"    console.log('‚úÖ USA Micronutrients calculated');",
									"    console.log('Guideline used:', response.guidelineUsed);",
									"    console.log('Pantothenic Acid:', response.micronutrients.pantothenicAcid.amount + ' mg');",
									"    console.log('Biotin:', response.micronutrients.biotin.amount + ' mcg');",
									"} else {",
									"    console.log('‚ùå Micronutrients calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMicronutrients\",\n  \"location\": \"USA\",\n  \"age\": 30,\n  \"gender\": \"male\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "4. Create Client with All Data (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_client_id', response.client.id);",
									"    console.log('‚úÖ USA Client created successfully');",
									"    console.log('Client ID:', response.client.id);",
									"    console.log('EER:', response.client.eerCalories || 'Not set');",
									"} else {",
									"    console.log('‚ùå Client creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"USA\",\n  \"lastName\": \"TestClient\",\n  \"email\": \"usa.journey@example.com\",\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"heightCm\": 175,\n  \"weightKg\": 70,\n  \"activityLevel\": \"moderately_active\",\n  \"location\": \"USA\",\n  \"eerCalories\": {{usa_eer}},\n  \"bmi\": {{usa_bmi}},\n  \"bmr\": {{usa_bmr}},\n  \"macrosData\": {{usa_macros}},\n  \"micronutrientsData\": {\n    \"micronutrients\": {{usa_micronutrients}},\n    \"guidelineUsed\": \"{{usa_guideline_used}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients"
							]
						}
					}
				},
				{
					"name": "5. Get USA Client (Verify)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ USA Client retrieved successfully');",
									"    console.log('Name:', response.client.firstName + ' ' + response.client.lastName);",
									"    console.log('EER:', response.client.eerCalories);",
									"    console.log('Biotin:', response.client.micronutrients.biotin);",
									"    console.log('Pantothenic Acid:', response.client.micronutrients.pantothenicAcid);",
									"} else {",
									"    console.log('‚ùå Failed to get client:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients/{{usa_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{usa_client_id}}"
							]
						}
					}
				},
				{
					"name": "6. Update USA Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ USA Client updated successfully');",
									"    console.log('Updated EER:', response.client.eerCalories);",
									"} else {",
									"    console.log('‚ùå Client update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eerCalories\": 3100,\n  \"macrosData\": {\n    \"Protein\": {\n      \"min_grams\": 77.5,\n      \"max_grams\": 271.3,\n      \"note\": \"IOM: 10-35% (Updated)\"\n    },\n    \"Carbohydrates\": {\n      \"min_grams\": 348.8,\n      \"max_grams\": 503.8,\n      \"note\": \"IOM: 45-65% (Updated)\"\n    },\n    \"Total Fat\": {\n      \"min_grams\": 68.9,\n      \"max_grams\": 120.6,\n      \"note\": \"IOM: 20-35% (Updated)\"\n    }\n  },\n  \"nutritionistNotes\": \"Updated nutrition plan for increased activity level\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{usa_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{usa_client_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "üáÆüá≥ India Complete Journey",
			"item": [
				{
					"name": "1. Calculate EER (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_eer', response.eer);",
									"    pm.environment.set('india_bmr', response.bmr);",
									"    pm.environment.set('india_bmi', response.bmi);",
									"    console.log('‚úÖ India EER calculated:', response.eer);",
									"    console.log('Formula used:', response.formulaUsed);",
									"    console.log('Guideline:', response.eerGuideline);",
									"} else {",
									"    console.log('‚ùå EER calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateEer\",\n  \"location\": \"India\",\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"heightCm\": 162,\n  \"weightKg\": 58,\n  \"activityLevel\": \"lightly_active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "2. Calculate Macros (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_macros', JSON.stringify(response.macros));",
									"    console.log('‚úÖ India Macros calculated');",
									"    console.log('Guideline:', response.macroGuideline);",
									"    console.log('Protein:', response.macros.Protein.min_grams + '-' + response.macros.Protein.max_grams + 'g');",
									"} else {",
									"    console.log('‚ùå Macros calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMacros\",\n  \"location\": \"India\",\n  \"eer\": {{india_eer}},\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"weightKg\": 58\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "3. Calculate Micronutrients (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_micronutrients', JSON.stringify(response.micronutrients));",
									"    pm.environment.set('india_guideline_used', response.guidelineUsed);",
									"    console.log('‚úÖ India Micronutrients calculated');",
									"    console.log('Guideline used:', response.guidelineUsed);",
									"    console.log('Pantothenic Acid:', response.micronutrients.pantothenicAcid.amount + ' mg');",
									"    console.log('Biotin:', response.micronutrients.biotin.amount + ' mcg');",
									"} else {",
									"    console.log('‚ùå Micronutrients calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMicronutrients\",\n  \"location\": \"India\",\n  \"age\": 28,\n  \"gender\": \"female\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "4. Create Client with All Data (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_client_id', response.client.id);",
									"    console.log('‚úÖ India Client created successfully');",
									"    console.log('Client ID:', response.client.id);",
									"    console.log('EER:', response.client.eerCalories || 'Not set');",
									"} else {",
									"    console.log('‚ùå Client creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Priya\",\n  \"lastName\": \"Sharma\",\n  \"email\": \"priya.journey@example.com\",\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"heightCm\": 162,\n  \"weightKg\": 58,\n  \"activityLevel\": \"lightly_active\",\n  \"location\": \"India\",\n  \"eerCalories\": {{india_eer}},\n  \"bmi\": {{india_bmi}},\n  \"bmr\": {{india_bmr}},\n  \"macrosData\": {{india_macros}},\n  \"micronutrientsData\": {\n    \"micronutrients\": {{india_micronutrients}},\n    \"guidelineUsed\": \"{{india_guideline_used}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients"
							]
						}
					}
				},
				{
					"name": "5. Get India Client (Verify)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ India Client retrieved successfully');",
									"    console.log('Name:', response.client.firstName + ' ' + response.client.lastName);",
									"    console.log('EER:', response.client.eerCalories);",
									"    console.log('Biotin:', response.client.micronutrients.biotin);",
									"    console.log('Pantothenic Acid:', response.client.micronutrients.pantothenicAcid);",
									"} else {",
									"    console.log('‚ùå Failed to get client:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients/{{india_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{india_client_id}}"
							]
						}
					}
				},
				{
					"name": "6. Update India Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ India Client updated successfully');",
									"    console.log('Updated EER:', response.client.eerCalories);",
									"} else {",
									"    console.log('‚ùå Client update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eerCalories\": 2300,\n  \"macrosData\": {\n    \"Protein\": {\n      \"min_grams\": 57.5,\n      \"max_grams\": 115.0,\n      \"note\": \"ICMR-NIN: Adequate protein intake (Updated)\"\n    },\n    \"Carbohydrates\": {\n      \"min_grams\": 287.5,\n      \"max_grams\": 402.5,\n      \"note\": \"ICMR-NIN: 50-70% of total energy (Updated)\"\n    },\n    \"Total Fat\": {\n      \"min_grams\": 38.3,\n      \"max_grams\": 76.7,\n      \"note\": \"ICMR-NIN: 15-30% of total energy (Updated)\"\n    }\n  },\n  \"nutritionistNotes\": \"Adjusted for weight management goals\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{india_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{india_client_id}}"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Making request to:', pm.request.url);",
					"console.log('Method:', pm.request.method);",
					"if (pm.environment.get('auth_token')) {",
					"    console.log('Auth token present ‚úÖ');",
					"} else {",
					"    console.log('‚ö†Ô∏è No auth token - make sure to register/login first');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('Response status:', pm.response.code);",
					"console.log('Response time:', pm.response.responseTime + 'ms');",
					"console.log('---');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://caloriescience-api.vercel.app",
			"type": "string"
		}
	],
	"journey": [
		{
			"name": "üá∫üá∏ USA Complete Journey",
			"item": [
				{
					"name": "1. Calculate EER (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_eer', response.eer);",
									"    pm.environment.set('usa_bmr', response.bmr);",
									"    pm.environment.set('usa_bmi', response.bmi);",
									"    console.log('‚úÖ USA EER calculated:', response.eer);",
									"    console.log('Formula used:', response.formulaUsed);",
									"    console.log('Guideline:', response.eerGuideline);",
									"} else {",
									"    console.log('‚ùå EER calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateEer\",\n  \"location\": \"USA\",\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"heightCm\": 175,\n  \"weightKg\": 70,\n  \"activityLevel\": \"moderately_active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "2. Calculate Macros (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_macros', JSON.stringify(response.macros));",
									"    console.log('‚úÖ USA Macros calculated');",
									"    console.log('Guideline:', response.macroGuideline);",
									"    console.log('Protein:', response.macros.Protein.min_grams + '-' + response.macros.Protein.max_grams + 'g');",
									"} else {",
									"    console.log('‚ùå Macros calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMacros\",\n  \"location\": \"USA\",\n  \"eer\": {{usa_eer}},\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"weightKg\": 70\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "3. Calculate Micronutrients (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_micronutrients', JSON.stringify(response.micronutrients));",
									"    pm.environment.set('usa_guideline_used', response.guidelineUsed);",
									"    console.log('‚úÖ USA Micronutrients calculated');",
									"    console.log('Guideline used:', response.guidelineUsed);",
									"    console.log('Pantothenic Acid:', response.micronutrients.pantothenicAcid.amount + ' mg');",
									"    console.log('Biotin:', response.micronutrients.biotin.amount + ' mcg');",
									"} else {",
									"    console.log('‚ùå Micronutrients calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMicronutrients\",\n  \"location\": \"USA\",\n  \"age\": 30,\n  \"gender\": \"male\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "4. Create Client with All Data (USA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('usa_client_id', response.client.id);",
									"    console.log('‚úÖ USA Client created successfully');",
									"    console.log('Client ID:', response.client.id);",
									"    console.log('EER:', response.client.eerCalories || 'Not set');",
									"} else {",
									"    console.log('‚ùå Client creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"USA\",\n  \"lastName\": \"TestClient\",\n  \"email\": \"usa.journey@example.com\",\n  \"age\": 30,\n  \"gender\": \"male\",\n  \"heightCm\": 175,\n  \"weightKg\": 70,\n  \"activityLevel\": \"moderately_active\",\n  \"location\": \"USA\",\n  \"eerCalories\": {{usa_eer}},\n  \"bmi\": {{usa_bmi}},\n  \"bmr\": {{usa_bmr}},\n  \"macrosData\": {{usa_macros}},\n  \"micronutrientsData\": {\n    \"micronutrients\": {{usa_micronutrients}},\n    \"guidelineUsed\": \"{{usa_guideline_used}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients"
							]
						}
					}
				},
				{
					"name": "5. Get USA Client (Verify)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ USA Client retrieved successfully');",
									"    console.log('Name:', response.client.firstName + ' ' + response.client.lastName);",
									"    console.log('EER:', response.client.eerCalories);",
									"    console.log('Biotin:', response.client.micronutrients.biotin);",
									"    console.log('Pantothenic Acid:', response.client.micronutrients.pantothenicAcid);",
									"} else {",
									"    console.log('‚ùå Failed to get client:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients/{{usa_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{usa_client_id}}"
							]
						}
					}
				},
				{
					"name": "6. Update USA Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ USA Client updated successfully');",
									"    console.log('Updated EER:', response.client.eerCalories);",
									"} else {",
									"    console.log('‚ùå Client update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eerCalories\": 3100,\n  \"macrosData\": {\n    \"Protein\": {\n      \"min_grams\": 77.5,\n      \"max_grams\": 271.3,\n      \"note\": \"IOM: 10-35% (Updated)\"\n    },\n    \"Carbohydrates\": {\n      \"min_grams\": 348.8,\n      \"max_grams\": 503.8,\n      \"note\": \"IOM: 45-65% (Updated)\"\n    },\n    \"Total Fat\": {\n      \"min_grams\": 68.9,\n      \"max_grams\": 120.6,\n      \"note\": \"IOM: 20-35% (Updated)\"\n    }\n  },\n  \"nutritionistNotes\": \"Updated nutrition plan for increased activity level\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{usa_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{usa_client_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "üáÆüá≥ India Complete Journey",
			"item": [
				{
					"name": "1. Calculate EER (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_eer', response.eer);",
									"    pm.environment.set('india_bmr', response.bmr);",
									"    pm.environment.set('india_bmi', response.bmi);",
									"    console.log('‚úÖ India EER calculated:', response.eer);",
									"    console.log('Formula used:', response.formulaUsed);",
									"    console.log('Guideline:', response.eerGuideline);",
									"} else {",
									"    console.log('‚ùå EER calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateEer\",\n  \"location\": \"India\",\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"heightCm\": 162,\n  \"weightKg\": 58,\n  \"activityLevel\": \"lightly_active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "2. Calculate Macros (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_macros', JSON.stringify(response.macros));",
									"    console.log('‚úÖ India Macros calculated');",
									"    console.log('Guideline:', response.macroGuideline);",
									"    console.log('Protein:', response.macros.Protein.min_grams + '-' + response.macros.Protein.max_grams + 'g');",
									"} else {",
									"    console.log('‚ùå Macros calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMacros\",\n  \"location\": \"India\",\n  \"eer\": {{india_eer}},\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"weightKg\": 58\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "3. Calculate Micronutrients (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_micronutrients', JSON.stringify(response.micronutrients));",
									"    pm.environment.set('india_guideline_used', response.guidelineUsed);",
									"    console.log('‚úÖ India Micronutrients calculated');",
									"    console.log('Guideline used:', response.guidelineUsed);",
									"    console.log('Pantothenic Acid:', response.micronutrients.pantothenicAcid.amount + ' mg');",
									"    console.log('Biotin:', response.micronutrients.biotin.amount + ' mcg');",
									"} else {",
									"    console.log('‚ùå Micronutrients calculation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"calculateMicronutrients\",\n  \"location\": \"India\",\n  \"age\": 28,\n  \"gender\": \"female\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculations"
							]
						}
					}
				},
				{
					"name": "4. Create Client with All Data (India)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('india_client_id', response.client.id);",
									"    console.log('‚úÖ India Client created successfully');",
									"    console.log('Client ID:', response.client.id);",
									"    console.log('EER:', response.client.eerCalories || 'Not set');",
									"} else {",
									"    console.log('‚ùå Client creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Priya\",\n  \"lastName\": \"Sharma\",\n  \"email\": \"priya.journey@example.com\",\n  \"age\": 28,\n  \"gender\": \"female\",\n  \"heightCm\": 162,\n  \"weightKg\": 58,\n  \"activityLevel\": \"lightly_active\",\n  \"location\": \"India\",\n  \"eerCalories\": {{india_eer}},\n  \"bmi\": {{india_bmi}},\n  \"bmr\": {{india_bmr}},\n  \"macrosData\": {{india_macros}},\n  \"micronutrientsData\": {\n    \"micronutrients\": {{india_micronutrients}},\n    \"guidelineUsed\": \"{{india_guideline_used}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients"
							]
						}
					}
				},
				{
					"name": "5. Get India Client (Verify)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ India Client retrieved successfully');",
									"    console.log('Name:', response.client.firstName + ' ' + response.client.lastName);",
									"    console.log('EER:', response.client.eerCalories);",
									"    console.log('Biotin:', response.client.micronutrients.biotin);",
									"    console.log('Pantothenic Acid:', response.client.micronutrients.pantothenicAcid);",
									"} else {",
									"    console.log('‚ùå Failed to get client:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clients/{{india_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{india_client_id}}"
							]
						}
					}
				},
				{
					"name": "6. Update India Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ India Client updated successfully');",
									"    console.log('Updated EER:', response.client.eerCalories);",
									"} else {",
									"    console.log('‚ùå Client update failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eerCalories\": 2300,\n  \"macrosData\": {\n    \"Protein\": {\n      \"min_grams\": 57.5,\n      \"max_grams\": 115.0,\n      \"note\": \"ICMR-NIN: Adequate protein intake (Updated)\"\n    },\n    \"Carbohydrates\": {\n      \"min_grams\": 287.5,\n      \"max_grams\": 402.5,\n      \"note\": \"ICMR-NIN: 50-70% of total energy (Updated)\"\n    },\n    \"Total Fat\": {\n      \"min_grams\": 38.3,\n      \"max_grams\": 76.7,\n      \"note\": \"ICMR-NIN: 15-30% of total energy (Updated)\"\n    }\n  },\n  \"nutritionistNotes\": \"Adjusted for weight management goals\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clients/{{india_client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clients",
								"{{india_client_id}}"
							]
						}
					}
				}
			]
		}
	]
} 